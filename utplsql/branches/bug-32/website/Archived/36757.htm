<head><style type="text/css">@import url(wbarchiv.css);</style></head><body><strong><a href="36755.htm">Previous</a> | <a href="38628.htm">Next</a></strong><hr size=0>
<b>Topic:</b> Automatic generation of test cases via GUI spec?<br>
<b>Conf:</b> 545, Msg: 36757<br>
<b>From:</b> Steven Feuerstein (<a href="mailto:steven@stevenfeuerstein.com">steven@stevenfeuerstein.com</a>)<br>
<b>Date:</b> 8/16/00 06:38 PM<br>

<p><title>Automatic generation of test cases via GUI spec? Steven Feuerstein sfeuerstein steven@stevenfeuerstein.com</title>
Wouldn't it be nice to not have to write your unit test code, but have it run automatically? Dynamic PL/SQL is pretty wonderful stuff and so easy to do in 8i. I sat around today (part of the day, anyway) dreaming about how far one could go "soft coding" all the characteristics of the unit test and then when you want to run a test of your code, the engine constructs the program calls along with the assertion calls, registers and results and gives you a red or green light?<br>
<br>
Probably too complex to be worth the effort, but there is my thinking:<br>
<br>
Through a GUI (version 3?) you say you want to build a unit test or actually a test case for program X. Now we have in the data dictionary everything we need to know to call the program: whether or not it is a function (see utGen for a function that returns TRUE/FALSE for this question), the number, names, types of arguments, etc. So to build a test case, you provide values for all in and in out arguments. You then provide the EXPRESSIONS that you want to the assertion of your choice for runtime evaluation. 

</body>
